Interface:

find (id or attr-map => v-map)
insert (attr-map => ID)
create (attr-map => v-map)
update (attr-map w/ id, or v-map and attr-map)
destroy (attr-map w/ id or just id => true or false)


---------------------------------------

* Put view-* functions into a core namespace
* 

* A CouchDB style MapReduce index mechanism
 - Given a predicate function create an index node that points to all members of a set that passes the predicate
 - Given a mapping function create an index node that points to a set of nodes which are the result of applying the mapping function to the given nodes

* Validations
* Callbacks

* Implement a content store, where blobs are stored using a hash of the blob as its ID
 - each blob has a corresponding node in the graph
 - linked to Mime-type nodes

* Pattern based querying (MetaWeb's MQL style)
 - Use map {} syntax to specify the properties and relations that are being looked for, where the values specify either predicates to match, or the desired output format
  * null => the property value 
  * []   => the set of relation target IDs
  * [{}] => the set of relation target objects
 - support arbitrary nesting:
{
  "name" : "Synchronicity",
  "artist" : "The Police",
  "track" : [{
     "name":null,
     "length":null
  }]
}




------------------------------------------

* UUIDs for nodes and edges w/ a UUID index for each (sub-)graph
 - b-tree index over :uuid property
 - look into supporting versioning and persistence on property modifications

* represent sub-graphs by building UUID index roots to hold all entities (just node?)

* Support human readable named entities
 - root node holds a name node that maintains b-tree index over :fs-name property

* sub-protocol registration to support various URL types

* node aliases are akin to distributed, symbolic links
 - hold the full path/URL to their target

* build a graph->json converter and try sending simple graphs between a client and server

* implement some node proxy functionality, where a node holds a URL for a remote node
  - alternate protocols
  - port numbers
  - public keys
  - trust/reputation information
  - how can this be a pluggable mechanism?
  - replicas: alternate nodes that satisfy this proxy node's capability

